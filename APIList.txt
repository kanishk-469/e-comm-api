Folder Structure
Route Configuration 
Creating APIs
Different API methods
Middlewares
Route Parameters
Query Parameters
Testing API using Postman(Used in Absent of UI)
Securing API using JWT TOKEN
Documenting API using swagger(OpenAPI Community)
CORS (Cross Origin Resource Sharing)
Logging (store log data into log.txt or combined.log file)
Error Handling

Still we have a big problem, we don't have Persistent storage(Database)
For that we used NoSQL Database like mongoDB and mongoose ODM library OF mongoDB



E-Commerece API Project :- 
ProductController:-
Get products - done 
Add a product - done
Get one product - done
Filter Product - done

{We need User(Login) here, then develop Following APIs}
{Before that we will Learn HOW TO SECURE OUR Application}
Rate Product - done 
Add items to Cart - done 
Get items of Cart - done 
Remove items from Cart - done


UserController
Sign up - Email, Name, Paswword, TypeOfUser(customer, seller) - done 
Sign in - (Email , password) - done 


Types of Authentication >>>> To secure some APIs
Basic Authentication
API KEYS
OAuth >> Open Authentication : gmail, facebook , github etc
JWT >> Most used JSON WEB TOKEN (npm i jsonwebtoken)



Miscallenious:-

API Documentation -- OpenAPI Standard (Help our Client/consumer, How to use API?)
swagger UI -- npm i swagger-ui-express 
File used - older version (swagger.json 2.0) & newer version (swaggerV3.json 3.0)

Inside server.js 
server.use("/api-docs", swagger.serve, swagger.setup(apiDocs));

CORS Policy, restrict specific client access (Bank example) , like web ui & mobile Application


//Aggregation pipeline, group the collection's documents and then perform operations
1. We need this data structure on client side as response: for averagePrice for each category
{
 _id:Cat1,
 averagePrice: 5000 
}

Few more insights we would like to have:- use mongosh in terminal
2.Find the average rating of a product in products's Collection

We need to find avg of array of ratings
db.products.aggregate([
    /// stage 1: Create documents for ratings
    { 
        $unwind:"$ratings"
    },
    /// stage 2: Group rating per product and get average
    {
        $group:{
            _id:"$name",
            averageRating:{$avg:"$ratings.rating"}
        }
    }
])

Another Approach 
db.products.aggregate([
    //stage 1: project name of product, and countOfRating using $project operator
    {
        $project:{
            name:1,
            countOfRating:{
               $cond:{if:{$isArray:"$ratings"},
               then:{$size:"$ratings"},else:0}
               } 
                 }
    },
    ///stage 2: sort the Collection
    {$sort:{countOfRating:-1}},

    ///stage 3: limit to just 2 item in result 
    {$limit:2}
    ])
